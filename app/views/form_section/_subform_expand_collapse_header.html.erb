<% #This template is to generate the header of every subform to make the expand/collapse functionality  %>
<%
    view_mode ||= false
    disable_action_buttons = subform.subform_section.is_summary_section ? "display:none;" : ""
    summary_section_class = subform.subform_section.is_summary_section ? "summary_section" : ""
    subform_name = subform.name
    if subform.subform_section.shared_subform.present?
      subform_name = subform.subform_section.shared_subform
      form_group_name = subform.subform_section.shared_subform_group
    end
    collapsed_fields = subform_section.collapsed_list

    if subform.expose_unique_id && i != "template"
      fk = field_keys(subform_name, i, 'unique_id', form_group_name)
      unique_id = " - #{formObject.value_for_attr_keys(fk).try(:slice, 0, 5)}"
    else
      unique_id = ""
    end
%>
<div class="row collapse_expand_subform_header">
  <div class="medium-7 columns">
    <span class="subform_header">
      <%= label_tag subform.name, t(subform.name, :default => subform.display_name.singularize), :class=>'key' %><%= unique_id %><%= violation_status(formObject, form_group_name, subform_name, i) %>
    </span>
    <div class="display_field">
      <% fields_id=[]
         data_types=[]
         value_fields=[]
         caregiver = false
         collapsed_fields.each do |field|
           fk = field_keys(subform_name, i, field.name, form_group_name)

           #view mode does not need the fields to update the header.
           unless view_mode
             #get the names of the fields that belong to the subforms header
             #this will help to update the header if the user change something
             name = field_tag_name formObject, field, fk
             fields_id << "#{subform.subform.name.dehumanize}_#{sanitize_to_id(name)}"

             #field_type will be used to identify how to retrieve the changes in the subform fields
             #to update the static text placeholder if the field was changed by the user and the user
             #collapsed the subform.
             field_type = field.type
             field_type = "chosen" if field.type == "select_box" and field.multi_select == true
             data_types << field_type + "_type"
           end

           #retrieve the value of the fields.
           if field.name == "relation_is_caregiver"
             #Don't see the way to do this without hardcode the name.
             #Users can change the dbname for this field.
             value = i.to_s == "template" ? "" : field_value(formObject, field, fk)
             #Display value for "false" is empty string.
             caregiver = value == true
           else
             value = i.to_s == "template" ? "" : field_value(formObject, field, fk)
             if field['option_strings_text_en'].present? && field['option_strings_text_en'].is_a?(Array)
               value_to_display = field_value_for_multi_select value, field
             else
               value_to_display = field_value_for_display value
             end
             value_fields << value_to_display
           end
         end

      %>
      <% if view_mode %>
        <span>
          <% #Don't see the way to do the caregiver thing without hardcode the names.
             #Users can change the dbname for this field.
             #Send the i18n string t('caregiver') to the browser. %>
          <%= value_fields.reject(&:empty?).join(' - ') + (caregiver ? t('caregiver') : "") %>
        </span>
      <% else %>
      <% #Don't see the way to do the caregiver thing without hardcode the names.
         #Users can change the dbname for this field.
         #Send the i18n string t('caregiver') to the browser. %>
      <span data-fields="<%= fields_id.join(',') %>" data-types="<%= data_types.join(',') %>" data-caregiver="<%= t('caregiver') %>">
        <%= value_fields.reject(&:empty?).join(' - ')  + (caregiver ? t('caregiver') : "") %>
      </span>
      <% end %>
    </div>
    <% if view_mode && (subform_section.subform_header_links.include? "tracing") %>
      <div class="subform_tracing_link">
        <%= link_to t('tracing_request.find_match'), cases_path(match: "#{@tracing_request.id}::#{@tracing_request.tracing_request_subform_section[i].unique_id}") %>
      </div>
    <% end %>
  </div>
  <div class="medium-5 columns">
    <span class="collapse_expand_subform expanded <%=summary_section_class%>" style="<%=disable_action_buttons%>">-</span>
    <% if subform.editable %>
      <%= link_to t('fields.remove'), '', class: "subform_remove grey-button", style: disable_action_buttons,
          data: { message: t('fields.subform_remove_message') } if current_actions(action: ['update', 'edit', 'new', 'create']) %>
    <% end %>
    <% if !formObject.new_record? && subform.name == "individual_details_subform_section" && can?(:create, Child) && params[:action] == 'show'%>
      <%= link_to I18n.t("buttons.create_case"), create_cp_case_from_individual_details_path(formObject.id, i), {class: "grey-button"} %>
    <% end %>
  </div>
</div>
