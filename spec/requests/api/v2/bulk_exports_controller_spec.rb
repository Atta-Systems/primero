require 'rails_helper'

describe Api::V2::BulkExportsController, type: :request do

  before :each do
    clean_data(BulkExport, Child, User)
    User.new(user_name: fake_user_name).save(validate: false)
    User.new(user_name: 'other_user').save(validate: false)

    @export_permission = Permission.new(
      resource: Permission::CASE,
      actions: [
        Permission::EXPORT_JSON
      ]
    )
    @export1 = BulkExport.create!(record_type: 'case', format: 'json', file_name: 'export1', owned_by: fake_user_name)
    @export2 = BulkExport.create!(record_type: 'case', format: 'json', file_name: 'export2', owned_by: fake_user_name)
    @export3 = BulkExport.create!(record_type: 'case', format: 'json', file_name: 'export3', owned_by: 'other_user')
  end

  let(:json) { JSON.parse(response.body) }

  describe 'GET /api/v2/exports' do

    it 'lists all permitted exports and accompanying metadata' do
      login_for_test(permissions: [@export_permission])
      get '/api/v2/exports'

      expect(response).to have_http_status(200)
      expect(json['data'].size).to eq(2)
      expect(json['data'].map { |c| c['file_name'] }).to include(@export1.file_name, @export2.file_name)
      expect(json['metadata']['total']).to eq(2)
      expect(json['metadata']['per']).to eq(20)
      expect(json['metadata']['page']).to eq(1)
    end

    it 'refuses unauthorized access' do
      login_for_test(permissions: [])
      get '/api/v2/exports'

      expect(response).to have_http_status(403)
      expect(json['errors'].size).to eq(1)
      expect(json['errors'][0]['resource']).to eq('/api/v2/exports')
    end

  end

  describe 'GET /api/v2/exports/:id' do

    it 'displays the correct record' do

    end

    it 'refuses unauthorized access to an export generated by someone else' do

    end

  end

  describe 'POST /api/v2/exports' do

    it 'creates a bulk export process' do

    end

    it 'triggers an export job' do

    end

    it 'refuses export of unauthorized record types' do

    end

    it 'refuses export of unauthorized export formats' do

    end

  end


  after :each do
    clean_data(BulkExport, Child, User)
  end


end