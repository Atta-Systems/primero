#!/usr/bin/python3


import os
import re
import shlex
import subprocess
import sys

import yaml


PROGRAM_NAME = os.path.basename(__file__)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

KEY_PATTERN = re.compile("^[- +0-9_a-zA-Z]+$")

YAML_PATH = os.path.join(PROJECT_ROOT, "config/locales/en.yml")


def main():
    validate_yaml_structure()
    validate_yaml_keys()
    scan_project()


def validate_yaml_structure():
    yamllint_cmd = (
        'yamllint -d "{extends: default, rules: {line-length: disable}}" '
        + shlex.quote(YAML_PATH)
    )

    if os.system(yamllint_cmd) != 0:
        sys.exit(1)


def validate_yaml_keys():
    fp = open(YAML_PATH, "r")

    yaml_dict = yaml.load(fp)
    validate_yaml_dict_keys(yaml_dict)

    fp.close()


def validate_yaml_dict_keys(yaml_dict):

    for key, value in yaml_dict.items():
        assert isinstance(key, str), '"{}" is not a string'.format(str(key))
        assert KEY_PATTERN.match(key), '"{}" does not match KEY_PATTERN'.format(
            str(key)
        )

        if isinstance(value, dict):
            validate_yaml_dict_keys(value)


def scan_project():
    pattern = "(\\<[Ii]18n\\.t\\(|\\<t\\()"
    command = [
        "grep",
        "-r",
        "-n",
        "--include=*.js",
        "--include=*.jsx",
        "--include=*.rb",
        "-E",
        "-e",
        pattern,
        PROJECT_ROOT,
    ]

    proc = subprocess.run(command, capture_output=True)
    assert len(proc.stderr) == 0, proc.stderr.decode("utf-8")

    results = proc.stdout.decode("utf-8").splitlines()
    print(len(results))


if __name__ == "__main__":
    main()
