<div class="display_field">
  <%
    fields_id=[]
    data_types=[]
    value_fields=[]
    caregiver = false
    collapsed_fields.each do |field|
    fk = field_keys(subform_name, i, field.name, form_group_id)
    #view mode does not need the fields to update the header.
    unless view_mode
      #get the names of the fields that belong to the subforms header
      #this will help to update the header if the user change something
      name = field_tag_name formObject, field, fk
      fields_id << "#{subform.subform.name.dehumanize}_#{sanitize_to_id(name)}"

      #field_type will be used to identify how to retrieve the changes in the subform fields
      #to update the static text placeholder if the field was changed by the user and the user
      #collapsed the subform.
      field_type = field.type
      field_type = "chosen" if field.type == "select_box" and field.multi_select == true
      data_types << field_type + "_type"
    end

    #retrieve the value of the fields.
    if field.name == "relation_is_caregiver"
      #Don't see the way to do this without hardcode the name.
      #Users can change the dbname for this field.
      value = i.to_s == "template" ? "" : field_value(formObject, field, fk)
      #Display value for "false" is empty string.
      caregiver = value == true
    else
      value = i.to_s == "template" ? "" : field_value(formObject, field, fk)
      if field['option_strings_text_en'].present? && field['option_strings_text_en'].is_a?(Array)
        value_to_display = field_value_for_multi_select value, field
      else
        value_to_display = field_value_for_display(value, field, @lookups)
      end
      value_fields << value_to_display
    end
    end
  %>
  <% if view_mode %>
    <span>
      <% #Don't see the way to do the caregiver thing without hardcode the names.
        #Users can change the dbname for this field.
        #Send the i18n string t('caregiver') to the browser. %>
      <%= value_fields.reject(&:empty?).join(' - ') + (caregiver ? t('caregiver') : "") %>
    </span>
  <% else %>
    <% #Don't see the way to do the caregiver thing without hardcode the names.
      #Users can change the dbname for this field.
      #Send the i18n string t('caregiver') to the browser. %>
    <span data-fields="<%= fields_id.join(',') %>" data-types="<%= data_types.join(',') %>" data-caregiver="<%= t('caregiver') %>">
      <%= value_fields.reject(&:empty?).join(' - ')  + (caregiver ? t('caregiver') : "") %>
    </span>
  <% end %>
</div>